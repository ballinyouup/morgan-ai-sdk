// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



// Records Wrangler Models
// model Case {
//   id            String          @id @default(cuid())
//   clientName    String
//   clientDob     String
//   caseNumber    String          @unique
//   status        String          @default("active")
//   createdAt     DateTime        @default(now())
//   updatedAt     DateTime        @updatedAt
//   medicalRecords MedicalRecord[]
//   recordRequests RecordRequest[]
//   reasonChain   ReasonChain[]
// }
//
// model MedicalRecord {
//   id              String   @id @default(cuid())
//   caseId          String
//   case            Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
//   documentId      String   @unique
//   originalName    String
//   provider        String
//   recordType      String   // billing, imaging, lab_results, medical_record, etc.
//   priority        String   @default("normal")
//   dateReceived    DateTime @default(now())
//   treatmentDate   String?
//   tags            String[] // Array of tags
//   caseRelevance   String   @default("medium")
//   requiresReview  Boolean  @default(false)
//   reviewedAt      DateTime?
//   reviewedBy      String?
//   storageUrl      String?  // URL to document in storage
//   metadata        Json?    // Additional metadata as JSON
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
// }
//
// model RecordRequest {
//   id                String   @id @default(cuid())
//   caseId            String
//   case              Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
//   referenceNumber   String   @unique
//   provider          String
//   clientName        String
//   clientDob         String
//   treatmentDates    String
//   recordType        String
//   status            String   @default("drafted") // drafted, sent, pending, received, incomplete, follow_up_needed
//   requestDate       DateTime @default(now())
//   deadlineDate      DateTime
//   requestLetter     String   @db.Text
//   followUpEmail     String   @db.Text
//   requiresAuth      Boolean  @default(true)
//   notes             String?  @db.Text
//   lastUpdated       DateTime @updatedAt
//   createdAt         DateTime @default(now())
//   history           RequestHistory[]
// }
//
// model RequestHistory {
//   id                String        @id @default(cuid())
//   requestId         String
//   request           RecordRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
//   status            String
//   notes             String?       @db.Text
//   actionTaken       String?
//   timestamp         DateTime      @default(now())
// }

// model Chat {
//   id String @id @default(cuid())
//   messages Message[]
// }
//
// model Message {
//   id     String @id @default(cuid())
//   role   String
//   text   String
//   chatId String
//   chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
// }

// Transparent Reason Chain for explainability
// model ReasonChain {
//   id          String   @id @default(cuid())
//   caseId      String
//   case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
//   agentType   String   // records_wrangler, client_communication, etc.
//   action      String
//   reasoning   String   @db.Text
//   data        Json?    // Additional data as JSON
//   confidence  Float?
//   timestamp   DateTime @default(now())
// }
//
// model Provider {
//   id          String   @id @default(cuid())
//   name        String
//   address     String?
//   phone       String?
//   email       String?
//   fax         String?
//   specialty   String?
//   recordsContact String?
//   notes       String?  @db.Text
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Case {
  id     String @id @default(cuid())
  chats  Chat[]
  clientName String
  clientDob String
  caseNumber String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status String @default("open")
  emails Email[]
}

model Chat {
  id String @id @default(cuid())
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id     String @id @default(cuid())
  role   String
  text   String
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Email {
  id     String @id @default(cuid())
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subject String
  body String
}

model Files {
  id     String @id @default(cuid())
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  path String
}

model TextMessage {
  id     String @id @default(cuid())
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text String
  from String
  to String
}

// Transparent Reason Chain for explainability
model ReasonChain {
  id          String   @id @default(cuid())
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  agentType   String   // records_wrangler, client_communication, etc.
  action      String
  reasoning   String   @db.Text
  data        Json?    // Additional data as JSON
  confidence  Float?
  timestamp   DateTime @default(now())
}